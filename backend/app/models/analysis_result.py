"""
This module defines the Pydantic models for Analysis Results, including their
structure for API responses and database storage.
"""

from datetime import datetime
from typing import Optional, Literal

from pydantic import BaseModel, Field


class AnalysisStatistics(BaseModel):
    """
Pydantic model for the statistical data of an analysis result.
"""
    loss_hectares: float = Field(..., ge=0, description="Hectares of loss detected")
    gain_hectares: float = Field(..., ge=0, description="Hectares of gain detected")
    change_percentage: float = Field(
        ..., description="Percentage of change detected (can be negative for loss)"
    )


class AnalysisImages(BaseModel):
    """
Pydantic model for Cloud Storage URLs of images related to an analysis.
"""
    baseline: str = Field(..., description="Cloud Storage URL for the baseline image")
    current: str = Field(..., description="Cloud Storage URL for the current image")
    change_mask: str = Field(..., description="Cloud Storage URL for the change mask image")


AnalysisProcessingStatus = Literal["in_progress", "completed", "failed"]


class AnalysisResultInDB(BaseModel):
    """
Pydantic model for an analysis result as stored in the database.
"""
    result_id: Optional[str] = Field(None, description="Unique identifier for the analysis result")
    area_id: str = Field(..., description="Reference to the monitoring area ID")
    timestamp: datetime = Field(
        default_factory=datetime.utcnow, description="Timestamp of when the analysis was recorded"
    )
    baseline_date: str = Field(..., description="ISO formatted date of the baseline image")
    current_date: str = Field(..., description="ISO formatted date of the current image")
    change_detected: bool = Field(..., description="True if significant change was detected")
    change_type: Literal["forest", "water"] = Field(..., description="Type of change monitored")
    statistics: AnalysisStatistics = Field(..., description="Statistical data of the analysis")
    images: AnalysisImages = Field(..., description="Cloud Storage URLs for related images")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score of the analysis (0.0 to 1.0)")
    report_text: Optional[str] = Field(None, description="Natural language report generated by Report Generator")
    processing_status: AnalysisProcessingStatus = Field(
        "in_progress", description="Current processing status of the analysis result"
    )
    error_message: Optional[str] = Field(None, description="Error message if processing failed")

    class Config:
        json_encoders = {
            datetime: lambda dt: dt.isoformat() + "Z",
        }
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
